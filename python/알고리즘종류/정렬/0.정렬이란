정렬(Sorting)이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것을 말합니다.
일반적으로 문제 상황에 따라 적절한 정렬 알고리즘이 공식처럼 사용됩니다.

정렬 종류
    선택 정렬
        처리되지 않은 데이터 중에서 가장 작은 데이터를 '선택'해 맨 앞에 있는 데이터와 바꾸는  것을 반복한다.
        탐색 범위가 진행할 수록 줄어들게 된다.
        이중 반복문을 통해 구현이 가능하다.

        ex
            array=[7,5,9,0,3,1,6,2,4,8]

            for i in range(len(array)):
                min_index = i # 가장 작은 원소의 인덱스
                for j in range(i + 1, len(array)):
                    if array[min_index] > array[j]:
                        min_index = j
                array[i], array[min_index] = array[min_index],array[i] # 스와프

            print(array)

        선택 정렬의 시간 복잡도는..
            선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다.
            구현 방식에 따라 사소한 오차가 있지만, 전체 연산 횟수는 다음과 같다.
            
            n + (n - 1) + (n - 2) + ... + 2

            이는 (n^2 + n - 2)/2로 표현할 수 있다. 빅오 표기법에 따라 O(N^2)이라고 작성한다.

    삽입 정렬
        처리되지 않은 데이터를 하나씩 골라 적절한 위치에 '삽입'한다.
        선택 정렬에 비해 구현 난이도가 높다. 다만, 일반적으로 더 효율적이다.

        ex
            array = [7,5,9,0,3,1,6,2,4,8]

            for i in range(1, len(array)):
                for j in range(i, 0, -1): # 인덱스 i부터 1까지 1씩 감소하며 반복한다.
                    if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동한다.
                        array[j] < array[j - 1] = array[j - 1], array[j]
                    else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춘다.
                        break
            
            print(array)

        
        삽입 정렬의 시간 복잡도
            삽입 정렬의 시간 복잡도는 O(N^2)이며, 선택 정렬과 마찬가지로 반복문을 2번 사용하여 구현한다.
            삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다.
                최선의 경우(이미 정렬되어 있는 상태에서 다시 삽입 정렬을 수행하는 경우) 시간 복잡도는 O(N)이 된다.
            

    퀵 정렬        
        '기준 데이터를 설정'하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법이다.
        일반적인 상황에서 가장 많이 사용되는 정렬 알고리즘 중 하나이다.
        병합 정렬과 더불어 대부분 프로그래밍 언어의 정렬 라이브러리의 근간이 되는 알고리즘이다.
        가장 기본적인 퀵 정렬은 '첫 번째 데이터를 기준 데이터(Pivot)로 설정'한다.
        * 피벗을 기준으로 데이터 묶음을 나누는 작업을 '분할(Divde)'이라고 한다.

        ex
            array = [5,7,9,0,3,1,6,2,4,8]
            
            def quick_sort(array, start, end):
                if start >= end: # 원소가 1개인 경우 종료한다.
                    return
                Pivot = start # 피벗은 첫 번째 원소이다.
                left = start + 1
                right = end
                while(left <= right):
                    # 피벗보다 큰 데이터를 찾을 때까지 반복한다.
                    while(left <= end and array[left] <= array[Pivot]):
                        left += 1
                    # 피벗보다 작은 데이터를 찾을 때까지 반복한다.
                    while(right >= start and array[right] >= array[Pivot]):
                        right -= 1
                    if(left > right): # 엇갈렸다면 작은 데이터와 피벗을 교체한다.
                        array[right],array[Pivot] = array[Pivot], array[right]
                    else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체한다.
                        array[left], array[right] = array[right], array[left]
                    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행한다.
                    quick_sort(array,start, right - 1)
                    quick_sort(array, right + 1, end)
                
                quick_sort(array, 0, len(array)-1)
                print(array)

            ex2
                array = [5,7,9,0,3,1,6,2,4,8]
                
                def quick_sort(array):
                # 리스트가 하나 이하의 원소만 담고 있다면 종료한다.
                    if len(array) <= 1:
                        return array
                    Pivot = array[0] # 피벗은 첫 번째 원소
                    tail = array[1:] # 피벗을 제외한 리스트

                    left_side = [x for x in tail if x <= Pivot] # 분할된 왼쪽 부분
                    right_side = [x for x in tail if x > Pivot] # 분할된 오른쪽 부분

                    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행하고, 전체 리스트를 반환한다.
                    return quick_sort(left_side) + [Pivot] + quick_sort(right_side)

                print(quick_sort(array))
    

        퀵 정렬의 시간 복잡도
            퀵 정렬은 평균의 경우 O(NlogN)의 시간 복잡도를 가진다.
            최악의 경우(첫 번째 원소를 피벗으로 삼을 때, 이미 정렬된 배열에 대해서 퀵 정렬을 수행하면) O(N^2)의 시간 복잡도를 가진다.
                
    
    계수 정렬
        특정한 조건이 부합할 때만 사용할 수 있지만 '매우 빠르게 동작하는' 정렬 알고리즘이다.
            계수 정렬은 '데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용이 가능'하다.
        데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N + K)를 보장한다.

        ex
            # 모든 원소의 값이 0보다 크거나 같다고 가정한다.
            array = [7,5,9,0,3,1,6,2,9,1,4,8,0,5,2]
            # 모든 범위를 포함하는 리스트를 선언한다.(모든 값은 0으로 초기화 한다.)
            count = [0]*(max(array)+1)

            for i in range(len(array)):
                count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값을 증가시킨다.

            for i in range(len(count)): # 리스트에 기록된 정렬 정보를 확인한다.
                for j in range(count[i]):
                    print(i, end=' ') # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스를 출력한다.

        
        계수 정렬의 시간 복잡도
            계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N + K)다.
            계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있다.
                데이터가 0과 999.999로 단 2개만 존재하는 경우 등등
            계수 정렬은 '동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용'할 수 있다.
                성적의 경우 100점을 맞은 학생이 여러 명일 수 있기 때문에 개수 정렬이 효과적이다.
        


### 종 정리 ###
대부분 프로그래밍 언어에서 지원하는 '표준 정렬 라이브러리는 최악의 경우에도 O(NlogN)을 보장하도록 설계'되어 있다.
위의 4가지 정렬 알고리즘을 비교하면 다음과 같다.

정렬 알고리즘           평균 시간 복잡도            공간 복잡도             특징
  선택 정렬                 O(N^2)                     O(N)             아이디어가 매우 간단하다.
  삽입 정렬                 O(N^2)                     O(N)             데이터가 거의 정렬되어 있을 때는 가장 빠르다.
  퀵 정렬                   O(NlogN)                   O(N)             대부분의 경우게 가장 적합하다, 충분히 빠르다.
  계수 정렬                 O(N + K)                   O(N + K)         데이터의 크기가 한정되어 있는   경우에만 사용 가능하다, 매우 빠르다.


