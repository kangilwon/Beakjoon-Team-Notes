다이나믹 프로그래밍 (=동적 계획법)
    '메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방범'이다.
    '이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장'하여 다시 계산하지 않도록 한다.
    다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운(하향식)과 보텀업(상향식))으로 구성된다.

'''
# 탑다운 vs 보텀업
탑다운(메모제이션) 방식은 하향식이라고 하고 보텀업 방식은 상향식 이라고 한다.
다이나믹 프로그래밍의 정형적인 형태는 보텀업 방식이다
    결과 저장용 리스트는 'DP 테이블'이라고 부른다.
엄밀히 말해서 메모이제이션 방식은 '이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미한다.'
    따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아니다.
    한 번 계산된 결과를 담아두고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있다.
'''

프로그래밍 분야의 "동적"(=프로그램이 실행되는 도중)
    자료구조에서 동적 할당은 '프로그램이 실행되는 동중에 실행에 필요한 메모리를 할당하는 기법이다.

반면 다이나믹 프로그래밍에서 다이나믹은 큰 의미가 없다.


다이나믹 프로그래밍의 사용 조건
    1. 최적 부분 구조(Optimal Substructure)
        큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
    2. 중복되는 부분 문제(Overlapping Subproblem)
        동일한 작은 문제를 반복적으로 해결해야 한다.


다이나믹 프로그래밍의 대표적 문제(피보나치 수열)
    피보나치 수열 : 1,1,2,3,5,8,13,21,34,55,89,...

    점화식(인접한 항들 사이의 관계식)
        피보나치 수열의 점화식 : A n = A_n-1 + A_n-2,   A_1 = 1,  a_2 = 1
    

    재귀함수로 표현한 피보나치 함수(시간복잡도 O(2**n),비효율적임)
    def fido(x):
        if x == 1 or x == 2:
            return 1
        return fido(x - 1) + fido(x - 2)
    
    print(fido(4))

    # 다이나믹 프로그래밍을 활용한 피보나치 수열 문제 풀이(시간복잡도 O(n))
        1, 하향식_메모이제이션(Memoization)
            메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 하나이다.
            한 번 계산한 결과를 메모리 공간에 메모하는 기법이다.
                같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다.
                값을 기록해 놓는다는 점에서 캐싱(Caching)이라고 한다.
            
        ## 탑다운 방식 활용 피보나치

        # 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화 0으로 채워진 크기 100의 리스트
        d=[0]*100

        # 피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
        def fibo(x):
            # 종료 조건(1 혹은 2일 때 1을 반환한다.)
            if x == 1 or x == 2:
                return 
            # 이미 계산한 적 있는 문제라면 그대로 반환한다.
            if d[x] != 0:
                return d[x]
            # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과를 반환한다.
            d[x] = fibo(x - 1) + fibo(x - 2)
            return d[x]

        print(fibo(99))

        ## 보텀업 방식 활용 피보나치

        # 앞서 계산된 결과를 저장하기 위한 'DP 테이블' 초기화
        d = [0] * 100

        # 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
        d[1] = 1
        d[2] = 1
        n = 99

        # 피보나치 함수 반복문으로 구현(보텀업 다이나믹 프로그래밍)
        for i in range(3, n + 1):
            d[i] = d[i - 1] + d[i - 2]

        print(d[n])

    '''
    ## 다이나믹 프로그래밍 vs 분할 정복
    다이나믹 프로그래밍과 분할 정복은 모두 쵝적 부분 구조를 가질 때 사용할 수 있다.
        큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서  큰 문제를 해결할 수 있는 상황에서 사용
    다이나믹 프로그래밍과 분할 정복의 차이점은 "부분 문제의 중복"이라고 볼 수 있다.
        다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
        분할 정복 문제에서는 동일한 문제가 반복적으로 계산되지 않는다.
    '''