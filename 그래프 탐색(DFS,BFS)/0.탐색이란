탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 말한다.

자료구조
    스택 자료구조
        먼저 들어 온 데이터가 나중에 나가는 선입후출 자료구조
        입구와 출구가 동일하다.
        list 자료형을 사용한다.
        ex
            stack = []
            stack.append(5)
            stack.append(2)
            stack.append(3)
            stack.append(7)
            stack.pop()
            stack.append(1)
            stack.append(4)
            stack.pop()
            print(stack[::-1]) # 최상단부터 역순출력
            print(stack) # 최하단부터 출력
        
    큐 자료구조
        먼저 들어 온 데이터가 먼저 나가는 선입선출의 자료구조
        입구와 출구가 터널 형태로 따로있다.
        list도 사용 가능하지만 시간복잡도가 비효율적이다
        따라서 덱(deque) 라이브러리를 사용한다.
        ex
            from collections import deque

            queue = deque()

            queue.append(5)
            queue.append(2)
            queue.append(3)
            queue.append(7)
            queue.popleft()
            queue.append(1)
            queue.append(4)
            queue.popleft()

            print(queue) # 먼저 들어온 순서대로 출력 [3, 7, 1, 4]
            queue.reberse() # 역순으로 뒤집기
            print(queue) # 나중에 들어온 원소부터 출력 [4, 1, 7, 3]

재귀 함수
    자기 자신을 다시 호출하는 함수를 의미한다.
    재귀 함수를 문제 풀이에서 사용하려면 종료 조건을 명시해야 한다.
    명시하지 않으면 무한히 호출된다.
    
    팩토리얼 구현 예제 
        n! = 1*2*3*...*(n-1)*n
        수학적으로 0!과 1!의 값은 1 이다.
        # 반복적으로 구현한 n!
        def factorial_iterative(n)
            result=1
            # 1 부터 n 까지의 수를 차례대로 곱한다.
            for i in range(1,n+1):
                result +=1
            return result

        # 재귀적으로 구현한 n!
        def factorial_recursive(n)
        if n <= 1: # n 이 1 이하인 경우 1을 반환한다.
            return 1
        # n! = n * (n-1)!를 그대로 코드로 작성하기
        return n * factorial_recursive(n - 1)

    모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 이싿.
    재귀 함수가 반복문보다 불리한 경우도 있다.
    컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓인다.
        하여 스텍을 사용해야 할 때 구현상 스택 라이브러리 대신에 재귀 함수를 이용하는 경우가 많다.
        